From 7bed6d87da4f810aefe3612baa4e64b8eaa74b36 Mon Sep 17 00:00:00 2001
From: rLapz <arthurlapz@gmail.com>
Date: Fri, 25 Jun 2021 18:54:43 +0700
Subject: [PATCH] 	add dwm-focusonclick, dwm-pertag, dwm-spawn, and some
 configurations

---
 config.def.h | 163 ++++++++++++++++++++++++++---------------------
 dwm.c        | 175 ++++++++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 259 insertions(+), 79 deletions(-)

diff --git a/config.def.h b/config.def.h
index 1c0b587..17b4ace 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,50 +1,60 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
-static const unsigned int snap      = 32;       /* snap pixel */
-static const int showbar            = 1;        /* 0 means no bar */
-static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
-static const char col_gray1[]       = "#222222";
-static const char col_gray2[]       = "#444444";
-static const char col_gray3[]       = "#bbbbbb";
-static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
-static const char *colors[][3]      = {
+static const unsigned int borderpx	= 1; 	/* border pixel of windows */
+static const unsigned int snap		= 32;	/* snap pixel */
+static const int showbar		= 1; 	/* 0 means no bar */
+static const int topbar			= 1; 	/* 0 means bottom bar */
+static const int focusonwheel		= 0;
+static const char *fonts[]		= { "Dina:size=9" };
+static const char color_1[]		= "#000000";
+static const char color_2[]		= "#f6f5f4";
+static const char color_3[]		= "#6d6d6d";
+static const char *colors[][3]		= {
 	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+	[SchemeNorm] = { color_2, color_1, color_3 },
+	[SchemeSel]  = { color_1, color_2, color_2 },
 };
+static const char userlabel[]		= "[rLapz]";
+
+/* autostart */
+static const char *autostart_file = "$HOME/.local/share/dwm/autostart.sh &";
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+ static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+//static const char *tags[] = {"<-", "<-", "<-", "<-", "<->", "->", "->", "->", "->"};
+//static const char *tags[] = {"H", "e", "h", "e", " ", "b", "o", "i", "."};
 
 static const Rule rules[] = {
 	/* xprop(1):
 	 *	WM_CLASS(STRING) = instance, class
 	 *	WM_NAME(STRING) = title
 	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+/* class	instance	title		tags mask   isfloating	monitor */
+{ "Gimp",	NULL,		NULL,			0,	  1,  -1 },
+{ "xdman-Main",	NULL,		NULL,			0,	  1,  -1 },
+{ NULL,		NULL,		"floating terminal",	0,	  1,  -1 },
+{ NULL,		NULL,		"trans-cli",		0,	  1,  -1 },
+{ "mpv",	NULL,		NULL,			0,	  1,  -1 },
+{ "Tor Browser",NULL,		NULL,			0,	  1,  -1 },
+{ "Lazarus",	NULL,		NULL,			0,	  1,  -1 },
+{ "TelegramDesktop",NULL,	NULL,			1 << 8,	  0,  -1 },
 };
 
 /* layout(s) */
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
-	{ "[]=",      tile },    /* first entry is default */
-	{ "><>",      NULL },    /* no layout function means floating behavior */
+	{ "[T]",      tile },    /* first entry is default */
+	{ "[F]",      NULL },    /* no layout function means floating behavior */
 	{ "[M]",      monocle },
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -56,60 +66,73 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
+static const char *dmenucmd[]		= { "dmenu_run_i", "-m", dmenumon, NULL };
+static const char *dmenudesktopcmd[]	= { "dmenu_desktop", "-m", dmenumon, NULL };
+/*
+static const char *termcmd[]		= { "TERMINAL", NULL };
+static const char *termfloatingcmd[]	= { "TERMINAL", "-t", "floating terminal", NULL };
+*/
 
 static Key keys[] = {
-	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
-	{ MODKEY,                       XK_b,      togglebar,      {0} },
-	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
-	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
-	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
-	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
-	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
-	{ MODKEY,                       XK_Return, zoom,           {0} },
-	{ MODKEY,                       XK_Tab,    view,           {0} },
-	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
-	{ MODKEY,                       XK_space,  setlayout,      {0} },
-	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
-	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
-	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
-	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
-	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
-	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
-	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
-	TAGKEYS(                        XK_1,                      0)
-	TAGKEYS(                        XK_2,                      1)
-	TAGKEYS(                        XK_3,                      2)
-	TAGKEYS(                        XK_4,                      3)
-	TAGKEYS(                        XK_5,                      4)
-	TAGKEYS(                        XK_6,                      5)
-	TAGKEYS(                        XK_7,                      6)
-	TAGKEYS(                        XK_8,                      7)
-	TAGKEYS(                        XK_9,                      8)
-	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+	/* modifieri		key		function	argument */
+	{ MODKEY,		XK_r,		spawn,		{.v = dmenucmd } },
+	{ MODKEY,		XK_p,		spawn,		{.v = dmenudesktopcmd } },
+
+	/*
+	{ MODKEY|ShiftMask,	XK_Return,	spawn,		{.v = termcmd } },
+	{ MODKEY|ShiftMask,	XK_f,		spawn,		{.v = termfloatingcmd } },
+	*/
+	{ MODKEY|ShiftMask,	XK_Return,	spawn,		SHCMD("$TERMINAL") },
+	{ MODKEY|ShiftMask,	XK_f,		spawn,		SHCMD("$TERMINAL -t \"floating terminal\"") },
+
+	{ MODKEY,		XK_b,		togglebar,	{0} },
+	{ MODKEY,		XK_j,		focusstack,	{.i = +1 } },
+	{ MODKEY,		XK_k,		focusstack,	{.i = -1 } },
+	{ MODKEY,		XK_i,		incnmaster,	{.i = +1 } },
+	{ MODKEY,		XK_d,		incnmaster,	{.i = -1 } },
+	{ MODKEY,		XK_h,		setmfact,	{.f = -0.05} },
+	{ MODKEY,		XK_l,		setmfact,	{.f = +0.05} },
+	{ MODKEY,		XK_Return,	zoom,		{0} },
+	{ MODKEY,		XK_Tab,		view,		{0} },
+	{ MODKEY|ShiftMask,	XK_c,		killclient,	{0} },
+	{ MODKEY,		XK_t,		setlayout,	{.v = &layouts[0]} },
+	{ MODKEY,		XK_f,		setlayout,	{.v = &layouts[1]} },
+	{ MODKEY,		XK_m,		setlayout,	{.v = &layouts[2]} },
+	{ MODKEY,		XK_space,	setlayout,	{0} },
+	{ MODKEY|ShiftMask,	XK_space,	togglefloating, {0} },
+	{ MODKEY,		XK_0,		view,		{.ui = ~0 } },
+	{ MODKEY|ShiftMask,	XK_0,		tag,		{.ui = ~0 } },
+	{ MODKEY,		XK_comma,	focusmon,       {.i = -1 } },
+	{ MODKEY,		XK_period,	focusmon,       {.i = +1 } },
+	{ MODKEY|ShiftMask,	XK_comma,	tagmon,         {.i = -1 } },
+	{ MODKEY|ShiftMask,	XK_period,	tagmon,         {.i = +1 } },
+	TAGKEYS(		XK_1,				0)
+	TAGKEYS(		XK_2,				1)
+	TAGKEYS(		XK_3,				2)
+	TAGKEYS(		XK_4,				3)
+	TAGKEYS(		XK_5,				4)
+	TAGKEYS(		XK_6,				5)
+	TAGKEYS(		XK_7,				6)
+	TAGKEYS(		XK_8,				7)
+	TAGKEYS(		XK_9,				8)
+	{ MODKEY|ShiftMask,	XK_q,	quit,			{0} },
 };
 
 /* button definitions */
 /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
 static Button buttons[] = {
-	/* click                event mask      button          function        argument */
-	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
-	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
-	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
-	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
-	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
-	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
-	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
-	{ ClkTagBar,            0,              Button1,        view,           {0} },
-	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
-	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
-	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+	/* click		event mask	button		function	argument */
+	{ ClkLtSymbol,		0,		Button1,	setlayout,	{0} },
+	{ ClkLtSymbol,		0,		Button3,	setlayout,	{.v = &layouts[2]} },
+	{ ClkWinTitle,		0,		Button2,	zoom,		{0} },
+	/*{ ClkStatusText,	0,		Button2,	spawn,		{.v = termcmd } }, */
+	{ ClkStatusText,	0,		Button2,	spawn,		SHCMD("$TERMINAL") },
+	{ ClkClientWin,		MODKEY,		Button1,	movemouse,	{0} },
+	{ ClkClientWin,		MODKEY,		Button2,	togglefloating,	{0} },
+	{ ClkClientWin,		MODKEY,		Button3,	resizemouse,	{0} },
+	{ ClkTagBar,		0,		Button1,	view,		{0} },
+	{ ClkTagBar,		0,		Button3,	toggleview,	{0} },
+	{ ClkTagBar,		MODKEY,		Button1,	tag,		{0} },
+	{ ClkTagBar,		MODKEY,		Button3,	toggletag,	{0} },
 };
 
diff --git a/dwm.c b/dwm.c
index b0b3466..8e99e58 100644
--- a/dwm.c
+++ b/dwm.c
@@ -20,6 +20,7 @@
  *
  * To understand everything else, start reading main().
  */
+#include <assert.h>
 #include <errno.h>
 #include <locale.h>
 #include <signal.h>
@@ -28,6 +29,8 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <libgen.h>
+#include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <X11/cursorfont.h>
@@ -111,6 +114,7 @@ typedef struct {
 	void (*arrange)(Monitor *);
 } Layout;
 
+typedef struct Pertag Pertag;
 struct Monitor {
 	char ltsymbol[16];
 	float mfact;
@@ -130,6 +134,7 @@ struct Monitor {
 	Monitor *next;
 	Window barwin;
 	const Layout *lt[2];
+	Pertag *pertag;
 };
 
 typedef struct {
@@ -194,6 +199,7 @@ static void resizeclient(Client *c, int x, int y, int w, int h);
 static void resizemouse(const Arg *arg);
 static void restack(Monitor *m);
 static void run(void);
+static void runautostart(void);
 static void scan(void);
 static int sendevent(Client *c, Atom proto);
 static void sendmon(Client *c, Monitor *m);
@@ -272,6 +278,15 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+struct Pertag {
+	unsigned int curtag, prevtag; /* current and previous tag */
+	int nmasters[LENGTH(tags) + 1]; /* number of windows in master area */
+	float mfacts[LENGTH(tags) + 1]; /* mfacts per tag */
+	unsigned int sellts[LENGTH(tags) + 1]; /* selected layouts */
+	const Layout *ltidxs[LENGTH(tags) + 1][2]; /* matrix of tags and layouts indexes  */
+	int showbars[LENGTH(tags) + 1]; /* display bar for the current tag */
+};
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -632,6 +647,7 @@ Monitor *
 createmon(void)
 {
 	Monitor *m;
+	unsigned int i;
 
 	m = ecalloc(1, sizeof(Monitor));
 	m->tagset[0] = m->tagset[1] = 1;
@@ -642,6 +658,20 @@ createmon(void)
 	m->lt[0] = &layouts[0];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
 	strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
+	m->pertag = ecalloc(1, sizeof(Pertag));
+	m->pertag->curtag = m->pertag->prevtag = 1;
+
+	for (i = 0; i <= LENGTH(tags); i++) {
+		m->pertag->nmasters[i] = m->nmaster;
+		m->pertag->mfacts[i] = m->mfact;
+
+		m->pertag->ltidxs[i][0] = m->lt[0];
+		m->pertag->ltidxs[i][1] = m->lt[1];
+		m->pertag->sellts[i] = m->sellt;
+
+		m->pertag->showbars[i] = m->showbar;
+	}
+
 	return m;
 }
 
@@ -700,6 +730,7 @@ drawbar(Monitor *m)
 	int boxs = drw->fonts->h / 9;
 	int boxw = drw->fonts->h / 6 + 2;
 	unsigned int i, occ = 0, urg = 0;
+	const char *statusbar = NULL;
 	Client *c;
 
 	/* draw status first so it can be overdrawn by tags later */
@@ -709,6 +740,11 @@ drawbar(Monitor *m)
 		drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
 	}
 
+	drw_setscheme(drw, scheme[SchemeNorm]);
+	statusbar = (m == selmon) ? stext : userlabel;
+	tw = TEXTW(statusbar) - lrpad + 2; /* 2px right padding */
+	drw_text(drw, m->ww - tw, 0, tw, bh, 0, statusbar, 0);
+
 	for (c = m->clients; c; c = c->next) {
 		occ |= c->tags;
 		if (c->isurgent)
@@ -967,7 +1003,25 @@ grabkeys(void)
 void
 incnmaster(const Arg *arg)
 {
-	selmon->nmaster = MAX(selmon->nmaster + arg->i, 0);
+	/* default
+	selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag] = MAX(selmon->nmaster + arg->i, 0);
+	*/
+
+	/* if selected monitor is not tile */
+	if (selmon->sellt > 0)
+		return;
+
+	unsigned int n	= 0;
+	Client *c	= NULL;
+
+	for (c = nexttiled(selmon->clients); c; c = nexttiled(c->next), n++);
+	if ((selmon->nmaster + arg->i) > n)
+		return;
+
+	selmon->nmaster = selmon->pertag->nmasters[
+				selmon->pertag->curtag
+			] = MAX(selmon->nmaster + arg->i, 1);
+	
 	arrange(selmon);
 }
 
@@ -1111,7 +1165,7 @@ monocle(Monitor *m)
 		if (ISVISIBLE(c))
 			n++;
 	if (n > 0) /* override layout symbol */
-		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
+		snprintf(m->ltsymbol, sizeof m->ltsymbol, "%s[%d]", layouts[2].symbol, n);
 	for (c = nexttiled(m->clients); c; c = nexttiled(c->next))
 		resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, 0);
 }
@@ -1381,6 +1435,13 @@ run(void)
 			handler[ev.type](&ev); /* call handler */
 }
 
+void
+runautostart(void)
+{
+	if ((getenv("HOME")) != NULL)
+		system(autostart_file);
+}
+
 void
 scan(void)
 {
@@ -1502,9 +1563,9 @@ void
 setlayout(const Arg *arg)
 {
 	if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt])
-		selmon->sellt ^= 1;
+		selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag] ^= 1;
 	if (arg && arg->v)
-		selmon->lt[selmon->sellt] = (Layout *)arg->v;
+		selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt] = (Layout *)arg->v;
 	strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof selmon->ltsymbol);
 	if (selmon->sel)
 		arrange(selmon);
@@ -1523,7 +1584,7 @@ setmfact(const Arg *arg)
 	f = arg->f < 1.0 ? arg->f + selmon->mfact : arg->f - 1.0;
 	if (f < 0.05 || f > 0.95)
 		return;
-	selmon->mfact = f;
+	selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag] = f;
 	arrange(selmon);
 }
 
@@ -1637,14 +1698,51 @@ sigchld(int unused)
 	while (0 < waitpid(-1, NULL, WNOHANG));
 }
 
+#define SPAWN_CWD_DELIM " []{}()<>\"':"
+
 void
 spawn(const Arg *arg)
 {
+	/* default
 	if (arg->v == dmenucmd)
 		dmenumon[0] = '0' + selmon->num;
+	*/
+	dmenumon[0] = '0' + selmon->num;
 	if (fork() == 0) {
 		if (dpy)
 			close(ConnectionNumber(dpy));
+		if(selmon->sel) {
+			const char* const home = getenv("HOME");
+			assert(home && strchr(home, '/'));
+			const size_t homelen = strlen(home);
+			char *cwd, *pathbuf = NULL;
+			struct stat statbuf;
+
+			cwd = strtok(selmon->sel->name, SPAWN_CWD_DELIM);
+			/* NOTE: strtok() alters selmon->sel->name in-place,
+			 * but that does not matter because we are going to
+			 * exec() below anyway; nothing else will use it */
+			while(cwd) {
+				if(*cwd == '~') { /* replace ~ with $HOME */
+					if(!(pathbuf = malloc(homelen + strlen(cwd)))) /* ~ counts for NULL term */
+						die("fatal: could not malloc() %u bytes\n", homelen + strlen(cwd));
+					strcpy(strcpy(pathbuf, home) + homelen, cwd + 1);
+					cwd = pathbuf;
+				}
+
+				if(strchr(cwd, '/') && !stat(cwd, &statbuf)) {
+					if(!S_ISDIR(statbuf.st_mode))
+						cwd = dirname(cwd);
+
+					if(!chdir(cwd))
+						break;
+				}
+
+				cwd = strtok(NULL, SPAWN_CWD_DELIM);
+			}
+
+			free(pathbuf);
+		}
 		setsid();
 		execvp(((char **)arg->v)[0], (char **)arg->v);
 		fprintf(stderr, "dwm: execvp %s", ((char **)arg->v)[0]);
@@ -1674,13 +1772,21 @@ tagmon(const Arg *arg)
 void
 tile(Monitor *m)
 {
-	unsigned int i, n, h, mw, my, ty;
-	Client *c;
+	unsigned int i, n, h, mw, my, ty, f = 0;
+	Client *c, *fc;
 
 	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
 	if (n == 0)
 		return;
 
+	for (fc = m->clients; fc; fc = fc->next) {
+		if (ISVISIBLE(fc))
+			f++;
+	}
+
+	if (f > 0)
+		snprintf(m->ltsymbol, sizeof (m->ltsymbol), "%s[%d]", layouts[0].symbol, f);
+
 	if (n > m->nmaster)
 		mw = m->nmaster ? m->ww * m->mfact : 0;
 	else
@@ -1702,7 +1808,7 @@ tile(Monitor *m)
 void
 togglebar(const Arg *arg)
 {
-	selmon->showbar = !selmon->showbar;
+	selmon->showbar = selmon->pertag->showbars[selmon->pertag->curtag] = !selmon->showbar;
 	updatebarpos(selmon);
 	XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
 	arrange(selmon);
@@ -1741,9 +1847,33 @@ void
 toggleview(const Arg *arg)
 {
 	unsigned int newtagset = selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK);
+	int i;
 
 	if (newtagset) {
 		selmon->tagset[selmon->seltags] = newtagset;
+
+		if (newtagset == ~0) {
+			selmon->pertag->prevtag = selmon->pertag->curtag;
+			selmon->pertag->curtag = 0;
+		}
+
+		/* test if the user did not select the same tag */
+		if (!(newtagset & 1 << (selmon->pertag->curtag - 1))) {
+			selmon->pertag->prevtag = selmon->pertag->curtag;
+			for (i = 0; !(newtagset & 1 << i); i++) ;
+			selmon->pertag->curtag = i + 1;
+		}
+
+		/* apply settings for this view */
+		selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+		selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+		selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+		selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+		selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+
+		if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+			togglebar(NULL);
+
 		focus(NULL);
 		arrange(selmon);
 	}
@@ -2038,11 +2168,37 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
+	int i;
+	unsigned int tmptag;
+
 	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 		return;
 	selmon->seltags ^= 1; /* toggle sel tagset */
-	if (arg->ui & TAGMASK)
+	if (arg->ui & TAGMASK) {
 		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
+		selmon->pertag->prevtag = selmon->pertag->curtag;
+
+		if (arg->ui == ~0)
+			selmon->pertag->curtag = 0;
+		else {
+			for (i = 0; !(arg->ui & 1 << i); i++) ;
+			selmon->pertag->curtag = i + 1;
+		}
+	} else {
+		tmptag = selmon->pertag->prevtag;
+		selmon->pertag->prevtag = selmon->pertag->curtag;
+		selmon->pertag->curtag = tmptag;
+	}
+
+	selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+	selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+	selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+	selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+	selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+
+	if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+		togglebar(NULL);
+
 	focus(NULL);
 	arrange(selmon);
 }
@@ -2145,6 +2301,7 @@ main(int argc, char *argv[])
 		die("pledge");
 #endif /* __OpenBSD__ */
 	scan();
+	runautostart();
 	run();
 	cleanup();
 	XCloseDisplay(dpy);
-- 
2.32.0

